{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sarah/Desktop/UNT Fall 2020/SWE/GroupProject/DeliveryApp/screens/CustomerDetailScreens/CustomerCreateListScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport * as firebase from 'firebase';\nimport '@firebase/firestore';\nimport ItemGridTile from \"../../components/ItemGridTile\";\n\nvar CustomerCreateList = function CustomerCreateList(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listOfItems = _useState2[0],\n      setListOfItems = _useState2[1];\n\n  var updateListOfItems = function updateListOfItems(curritem) {\n    setListOfItems(function (listOfItems) {\n      return [].concat(_toConsumableArray(listOfItems), [curritem]);\n    });\n  };\n\n  useEffect(function () {\n    var storeName = props.route.params.storeName;\n\n    try {\n      var db = firebase.firestore();\n      db.collection(\"Stores\").doc(storeName).collection(\"Items\").get().then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          var mydata = doc.data();\n          var currItemObj = {\n            id: doc.id,\n            name: mydata.Name,\n            price: mydata.Price\n          };\n          updateListOfItems(currItemObj);\n        });\n      });\n    } catch (_unused) {\n      console.log(\"Failed to Connect to db\");\n    }\n  }, []);\n\n  var renderGridItem = function renderGridItem(itemData) {\n    return React.createElement(ItemGridTile, {\n      title: itemData.item.name,\n      price: itemData.item.price,\n      onSelect: function onSelect() {\n        console.log(\"Item Selected\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 4\n      }\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: listOfItems,\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id;\n    },\n    renderItem: renderGridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default CustomerCreateList;","map":{"version":3,"sources":["/Users/sarah/Desktop/UNT Fall 2020/SWE/GroupProject/DeliveryApp/screens/CustomerDetailScreens/CustomerCreateListScreen.js"],"names":["React","useState","useEffect","firebase","ItemGridTile","CustomerCreateList","props","listOfItems","setListOfItems","updateListOfItems","curritem","storeName","route","params","db","firestore","collection","doc","get","then","querySnapshot","forEach","mydata","data","currItemObj","id","name","Name","price","Price","console","log","renderGridItem","itemData","item","styles","screen","index","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,qBAAP;AAEA,OAAOC,YAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK,EAAK;AAAA,kBACEL,QAAQ,CAAE,EAAF,CADV;AAAA;AAAA,MAC7BM,WAD6B;AAAA,MAChBC,cADgB;;AAGpC,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AACvCF,IAAAA,cAAc,CAAE,UAAAD,WAAW;AAAA,0CAAQA,WAAR,IAAqBG,QAArB;AAAA,KAAb,CAAd;AACA,GAFD;;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMS,SAAS,GAAEL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBF,SAApC;;AACA,QAAI;AACH,UAAMG,EAAE,GAAGX,QAAQ,CAACY,SAAT,EAAX;AACAD,MAAAA,EAAE,CAACE,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BN,SAA5B,EAAuCK,UAAvC,CAAkD,OAAlD,EAA2DE,GAA3D,GAAiEC,IAAjE,CAAuE,UAACC,aAAD,EAAmB;AACzFA,QAAAA,aAAa,CAACC,OAAd,CAAsB,UAACJ,GAAD,EAAQ;AAE7B,cAAMK,MAAM,GAAEL,GAAG,CAACM,IAAJ,EAAd;AACA,cAAIC,WAAW,GAAE;AAChBC,YAAAA,EAAE,EAAER,GAAG,CAACQ,EADQ;AAEhBC,YAAAA,IAAI,EAAEJ,MAAM,CAACK,IAFG;AAGhBC,YAAAA,KAAK,EAAEN,MAAM,CAACO;AAHE,WAAjB;AAKApB,UAAAA,iBAAiB,CAACe,WAAD,CAAjB;AACA,SATD;AAUA,OAXD;AAYA,KAdD,CAeA,gBAAK;AACJM,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD,GApBQ,EAoBP,EApBO,CAAT;;AAsBA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AAClC,WACC,oBAAC,YAAD;AACC,MAAA,KAAK,EAAGA,QAAQ,CAACC,IAAT,CAAcR,IADvB;AAEC,MAAA,KAAK,EAAGO,QAAQ,CAACC,IAAT,CAAcN,KAFvB;AAGC,MAAA,QAAQ,EAAI,oBACX;AACCE,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAWA,GAZD;;AAcC,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE7B,WAAhB;AAA6B,IAAA,YAAY,EAAE,sBAAC2B,IAAD,EAAMG,KAAN;AAAA,aAAgBH,IAAI,CAACT,EAArB;AAAA,KAA3C;AAAoE,IAAA,UAAU,EAAEO,cAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CADF;AAKD,CAhDD;;AAkDA,IAAMG,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAChCH,EAAAA,MAAM,EAAE;AACPI,IAAAA,IAAI,EAAC,CADE;AAEPC,IAAAA,cAAc,EAAC,QAFR;AAGPC,IAAAA,UAAU,EAAE;AAHL;AADwB,CAAlB,CAAf;AAOA,eAAerC,kBAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { StyleSheet, Text, View, FlatList } from 'react-native';\nimport * as firebase from 'firebase';\nimport '@firebase/firestore';\n\nimport ItemGridTile from '../../components/ItemGridTile';\n\nconst CustomerCreateList = props =>  {\n\tconst [listOfItems, setListOfItems] = useState ([]);\n\n\tconst updateListOfItems = (curritem) => {\n\t\tsetListOfItems( listOfItems => [...listOfItems, curritem]);\n\t};\n\n\tuseEffect(() => {\n\t\tconst storeName= props.route.params.storeName; // just to reduce verbose code\n\t\ttry {\n\t\t\tconst db = firebase.firestore();\n\t\t\tdb.collection(\"Stores\").doc(storeName).collection(\"Items\").get().then ((querySnapshot) => {\n\t\t\t\tquerySnapshot.forEach((doc)=> {\n\t\t\t\t\t//console.log(\"Item id:\",doc.id,\"Item data: \",doc.data());\n\t\t\t\t\tconst mydata= doc.data();\n\t\t\t\t\tlet currItemObj= {\n\t\t\t\t\t\tid: doc.id,\n\t\t\t\t\t\tname: mydata.Name,\n\t\t\t\t\t\tprice: mydata.Price\n\t\t\t\t\t};\n\t\t\t\t\tupdateListOfItems(currItemObj);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tcatch{\n\t\t\tconsole.log(\"Failed to Connect to db\");\n\t\t}\n\t},[]);\n\n\tconst renderGridItem = itemData => {\n\t\treturn(\n\t\t\t<ItemGridTile\n\t\t\t\ttitle= {itemData.item.name}\n\t\t\t\tprice= {itemData.item.price}\n\t\t\t\tonSelect= { () => \n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.log(\"Item Selected\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/>\n\t\t)\n\t}\n\t//console.log(props.route.params.storeName)\n  return (\n    <View style={styles.screen}>\n\t\t\t<FlatList data={listOfItems} keyExtractor={(item,index) => item.id} renderItem={renderGridItem} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n\tscreen: {\n\t\tflex:1,\n\t\tjustifyContent:'center',\n\t\talignItems: 'center',\n\t}\n});\nexport default CustomerCreateList;\n\n//numColumns={2} this goes in flatlist element and  will output as two columns need to style"]},"metadata":{},"sourceType":"module"}