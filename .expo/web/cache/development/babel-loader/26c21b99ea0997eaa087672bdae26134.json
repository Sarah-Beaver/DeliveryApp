{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sarah/Desktop/UNT Fall 2020/SWE/GroupProject/DeliveryApp/screens/CustomerDetailScreens/SelectStoreScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as firebase from 'firebase';\nimport '@firebase/firestore';\nimport { STORES } from \"../../data/placeHolderStores\";\nimport StoreGridTile from \"../../components/StoreGridTile\";\n\nvar SelectStore = function SelectStore(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      listOfStores = _useState2[0],\n      setListOfStores = _useState2[1];\n\n  var updateListOfStores = function updateListOfStores(currStore) {\n    setListOfStores(function (listOfStores) {\n      return [].concat(_toConsumableArray(listOfStores), [{\n        id: currStore\n      }]);\n    });\n  };\n\n  useEffect(function () {\n    try {\n      var db = firebase.firestore();\n      db.collection(\"Stores\").get().then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          updateListOfStores(doc.id);\n        });\n      });\n    } catch (_unused) {\n      console.log(\"Failed to Connect to db\");\n    }\n  }, []);\n  console.log(listOfStores);\n\n  var renderGridItem = function renderGridItem(itemData) {\n    return React.createElement(StoreGridTile, {\n      title: itemData.item.id,\n      onSelect: function onSelect() {\n        props.navigation.navigate(\"CreateList\", {\n          storeName: itemData.item.id\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }\n    });\n  };\n\n  return React.createElement(FlatList, {\n    data: listOfStores,\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id;\n    },\n    renderItem: renderGridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default SelectStore;","map":{"version":3,"sources":["/Users/sarah/Desktop/UNT Fall 2020/SWE/GroupProject/DeliveryApp/screens/CustomerDetailScreens/SelectStoreScreen.js"],"names":["React","useState","useEffect","firebase","STORES","StoreGridTile","SelectStore","props","listOfStores","setListOfStores","updateListOfStores","currStore","id","db","firestore","collection","get","then","querySnapshot","forEach","doc","console","log","renderGridItem","itemData","item","navigation","navigate","storeName","index","styles","StyleSheet","create","screen","flex","justifyContent","alignItems"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,qBAAP;AAGA,SAAQC,MAAR;AACA,OAAOC,aAAP;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAK;AAAA,kBACWN,QAAQ,CAAC,EAAD,CADnB;AAAA;AAAA,MACtBO,YADsB;AAAA,MACRC,eADQ;;AAG7B,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAe;AACzCF,IAAAA,eAAe,CAAC,UAAAD,YAAY;AAAA,0CAAQA,YAAR,IAAsB;AAACI,QAAAA,EAAE,EAACD;AAAJ,OAAtB;AAAA,KAAb,CAAf;AACA,GAFD;;AAIAT,EAAAA,SAAS,CAAC,YAAK;AACd,QAAI;AACH,UAAMW,EAAE,GAAGV,QAAQ,CAACW,SAAT,EAAX;AACAD,MAAAA,EAAE,CAACE,UAAH,CAAc,QAAd,EAAwBC,GAAxB,GAA8BC,IAA9B,CAAmC,UAACC,aAAD,EAAmB;AACrDA,QAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,GAAD,EAAS;AAE7BV,UAAAA,kBAAkB,CAACU,GAAG,CAACR,EAAL,CAAlB;AACD,SAHD;AAIA,OALD;AAMA,KARD,CASA,gBAAK;AACJS,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD,GAbQ,EAaP,EAbO,CAAT;AAeAD,EAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;;AACA,MAAMe,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AAElC,WACC,oBAAC,aAAD;AACC,MAAA,KAAK,EAAGA,QAAQ,CAACC,IAAT,CAAcb,EADvB;AAEC,MAAA,QAAQ,EAAG,oBACV;AACCL,QAAAA,KAAK,CAACmB,UAAN,CAAiBC,QAAjB,CAA0B,YAA1B,EAAwC;AACvCC,UAAAA,SAAS,EAAEJ,QAAQ,CAACC,IAAT,CAAcb;AADc,SAAxC;AAGA,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAYA,GAdD;;AAeC,SACA,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEJ,YAAhB;AAA8B,IAAA,YAAY,EAAG,sBAACiB,IAAD,EAAOI,KAAP;AAAA,aAAiBJ,IAAI,CAACb,EAAtB;AAAA,KAA7C;AAAyE,IAAA,UAAU,EAAEW,cAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA;AAGD,CAzCD;;AA2CA,IAAMO,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAChCC,EAAAA,MAAM,EAAE;AACPC,IAAAA,IAAI,EAAC,CADE;AAEPC,IAAAA,cAAc,EAAC,QAFR;AAGPC,IAAAA,UAAU,EAAE;AAHL;AADwB,CAAlB,CAAf;AAOA,eAAe9B,WAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Button, StyleSheet, Text, View, FlatList, TouchableOpacity } from 'react-native';\nimport * as firebase from 'firebase';\nimport '@firebase/firestore';\n\n\nimport {STORES} from '../../data/placeHolderStores';\nimport StoreGridTile from '../../components/StoreGridTile';\n\nconst SelectStore = props =>  {\n\tconst [listOfStores, setListOfStores] = useState([]);\n\n\tconst updateListOfStores = (currStore) => {  \n\t\tsetListOfStores(listOfStores => [...listOfStores, {id:currStore}]);\n\t};\n\n\tuseEffect(() =>{\n\t\ttry {\n\t\t\tconst db = firebase.firestore();\n\t\t\tdb.collection(\"Stores\").get().then((querySnapshot) => {\n\t\t\t\tquerySnapshot.forEach((doc) => {\n\t\t\t\t\t\t//console.log(\"docid:\",doc.id);\n\t\t\t\t\t\tupdateListOfStores(doc.id);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tcatch{\n\t\t\tconsole.log(\"Failed to Connect to db\");\n\t\t}\n\t},[]);\n\n\tconsole.log(listOfStores)\n\tconst renderGridItem = itemData => {\n\t\t//console.log(itemData)\n\t\treturn(\n\t\t\t<StoreGridTile\n\t\t\t\ttitle= {itemData.item.id}\n\t\t\t\tonSelect={ ()=> \n\t\t\t\t\t{\n\t\t\t\t\t\tprops.navigation.navigate(\"CreateList\", {\n\t\t\t\t\t\t\tstoreName: itemData.item.id\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/>\n\t\t)\n\t}\n  return (\n\t\t<FlatList data={listOfStores} keyExtractor= {(item, index) => item.id }  renderItem={renderGridItem} />\n  );\n}\n\nconst styles = StyleSheet.create({\n\tscreen: {\n\t\tflex:1,\n\t\tjustifyContent:'center',\n\t\talignItems: 'center',\n\t}\n});\nexport default SelectStore;"]},"metadata":{},"sourceType":"module"}